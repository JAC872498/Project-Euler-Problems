"""
"""

from itertools import permutations
	
def findSmallCube(num,cubes):
	small=num
	for perm in permutations(int(i) for i in str(num)):
		n=0
		for p in perm:
			n=(n*10)+p
		if(isCube(n,cubes) and n<small):
			small=n
	return(small)
	
def alreadyUsed(n,cubes):
	for n1 in cubes:
		if(n1[0]==n):
			return(n1)
	return(-1)
	
def translateNum(num):
	newNum=[0,0,0,0,0,0,0,0,0,0]
	for n in range(len(str(num))):
		newNum[(int(num/(10**(n))%10))]+=1
	n=0
	for p in newNum:
		n=(n*10)+p
	return(n)

cubes=[]
num=0
#print([i[1] for i in cubes])
while(3 not in [i[1] for i in cubes]):
	print(num)
	num+=1
	#print(cubes)
	#print("\n")
	if(translateNum(num**3) in [i[0] for i in cubes]):#num**3 in [i[0] for i in cubes]
		cubes[alreadyUsed(num**3,cubes)][1]+=1
	else:
		cubes.append([translateNum(num**3),1])
		
#print(cubes)
"""for n in cubes:
	if(n[0]==1111112000):
		print(n)"""
"""while(findPerms(num**3,cubes)!=4):1111112000
	num+=1
	if(len(str(num**3))!=len(str((num-1)**3))):
		cubes=[]
	cubes.append(num**3)
	print(cubes)
	print(num)
print(num**3)
print(findSmallCube(num**3,cubes))"""
#TODO: translate number into 9 digit num based on digit occurance(123456789 = 111111111, 158 = 100010010). If the same 9 digit num occurs that it is a cube permutation
